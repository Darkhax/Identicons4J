package com.diluv.identicon;

import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.util.logging.Logger;

/**
 * This class holds all of the utility fields and methods related to this library. It's not the
 * hub for using this library.
 *
 * @author Tyler Hancock (Darkhax)
 */
public class Identicons {

    /**
     * The version of the Identicons4J lib. The value of this field is set to the proper
     * version by the build process.
     */
    public static final String VERSION = "@VERSION@";

    /**
     * A logger for the Identicons4J lib.
     */
    public static final Logger LOG = Logger.getLogger("Identicons4J");

    /**
     * This method can be used to scale up an image generated by a
     * com.diluv.identicon.generators.IIdenticonGenerator. It is highly recommended that you
     * maintain apsect ratio. This method uses the nearest neighbor algorithm, which generally
     * does a good job at resizing small and simplistic images, such as identicons.
     *
     * @param input The input image to resize.
     * @param width The desired width for the new image.
     * @param height The desired height for the new image.
     * @return A scaled up version of the input image.
     */
    public static BufferedImage scaleUpImage (BufferedImage input, int width, int height) {

        final AffineTransform transform = new AffineTransform();
        transform.scale(width / input.getWidth(), height / input.getHeight());

        final AffineTransformOp transformer = new AffineTransformOp(transform, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);

        return transformer.filter(input, new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB));
    }
}